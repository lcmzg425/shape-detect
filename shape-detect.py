import os

import matplotlib
import numpy as np
import cv2
from matplotlib import pyplot as plt

path_pic = "./img"

filename = os.listdir(path_pic)

circle = cv2.imread(path_pic + "/circle.png", 0)
parall = cv2.imread(path_pic + "/parall.png", 0)
sq = cv2.imread(path_pic + "/sq.png", 0)
tria = cv2.imread(path_pic + "/tria.png", 0)
# ret, thresh = cv2.threshold(circle, 100, 255, 0)
#
# image2 = cv2.imread(path_pic + "/test1.png", 0)
#
# # 找到轮廓
#
# contours, _ = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
#
# drawing = np.zeros(circle.shape) + 255
# imgnew = cv2.drawContours(drawing, contours[1], -1, (0, 255, 255), 0)
# # 绘制轮廓
# cv2.drawContours(imgnew, contours[1], -1, (0, 255, 0), 2)

e7 = [[443,519],[449,518],[455,517],[464,516],[474,515],[486,514],[501,514],[517,513],[537,513],[556,513],[580,513],[600,513],[624,513],[643,513],[661,514],[677,517],[689,519],[697,520],[704,522],[706,523],[707,523],[707,524],[705,525],[702,528],[693,535],[682,544],[666,553],[649,566],[629,581],[604,599],[583,613],[559,628],[544,634],[532,638],[521,641],[509,643],[500,644],[495,645],[492,646],[490,646],[489,646],[490,645],[491,642],[493,638],[496,630],[500,621],[505,608],[511,594],[517,579],[522,563],[528,548],[535,528],[542,509],[547,492],[552,478],[557,461],[561,448],[565,437],[568,428],[571,425],[572,423],[573,421],[574,421],[574,428],[575,437],[576,449],[578,466],[581,487],[584,510],[588,536],[593,563],[599,584],[606,604],[612,621],[618,632],[621,642],[624,647],[626,651],[627,653],[627,656],[628,657],[626,657],[623,656],[621,655],[619,652],[615,649],[610,644],[603,636],[596,629],[587,620],[579,612],[569,604],[559,598],[550,591],[540,585],[532,581],[523,576],[518,572],[512,569],[509,567],[507,565],[505,563],[503,561],[500,556],[499,554],[496,551],[494,547],[493,546],[492,544],[491,543],[490,543],[490,542]]

e8 = [[372,425],[371.85,429],[370.85,433],[369.3,437],[368.7,440.85],[367.15,444.3],[365.85,448.85],[364.15,453],[362.85,457.15],[361,461.85],[359,466],[357.15,469.85],[355.7,473.3],[353.15,477.7],[351,481.15],[349.15,485],[347.85,488.85],[346,492.15],[344.3,495.7],[343.85,497.85],[343,499.15],[342.15,500.85],[342,502],[342,503],[341.85,504],[341.15,505],[341,506],[340.85,506.85],[340.15,507.15],[340.45,507.85],[343.45,507.85],[348.7,506.85],[353.15,505.15],[358,504],[362.85,503.15],[367.15,503],[371.7,502.85],[375.15,502.15],[379,502],[383,502],[386.85,502],[390.15,502],[393.7,502],[396.15,502],[398.85,502],[400.85,502],[402.15,502],[403.85,502],[405.15,502],[406.85,502],[408,502],[408.85,501.85],[409.15,501],[410.15,499.7],[411.85,497.3],[413,496],[413.85,495],[414.15,493.85],[415.3,491.25],[417.7,485.6],[419.3,481.7],[421.85,476.85],[424,470.7],[426,463.15],[428,456.45],[430,451.85],[431.85,447.15],[432.85,443.15],[433,440.15],[433.15,438],[433.85,436],[434,434.15],[434.15,433],[434.85,432],[435,431],[435,430],[434.7,429.15],[432.7,429],[429,429],[424.7,429],[418.7,429],[411.3,429],[404.85,429.15],[398.45,429.85],[394,430],[390,430],[386.45,430],[384.85,430],[382.85,430],[380.3,430],[379,430],[378,430],[377.15,430.15],[376.85,430.85],[376,431],[375,431],[374,431.15],[372.85,431.85],[371.15,432],[370,432],[369,432],[368,432]]

e1 = [[471,493],[470,493],[468.85,493],[467,493],[464.85,493.15],[462,494],[458.7,495.15],[454.15,497],[449.7,499],[444,501.15],[438,503.7],[432.15,505.15],[427,507.15],[421.85,510],[416.15,512.85],[411.15,515.15],[407.15,517.85],[403.85,520.15],[400,523.15],[396.3,526.85],[393.85,530.15],[391.15,533.7],[388.85,536.3],[386.15,539.85],[384.15,543],[383,546],[381.85,549.15],[380,553.15],[378.15,558],[377,562.85],[376,567.15],[375,572],[374.15,576.85],[374,580.85],[374,584.15],[374,588.15],[374.3,592.85],[375.85,597.15],[377.15,601.85],[379,606.15],[381,610.85],[383.15,615.15],[385.7,619.85],[387.3,624],[390,627.85],[392.7,631.3],[394.3,635.55],[396.85,638.3],[399.15,642],[402,646],[405,650.15],[408,654.7],[411,658.15],[413.7,661.55],[415.15,663.15],[417.15,664.85],[419.7,666],[421.3,667.15],[424,669],[427,670.7],[430,671.15],[433,672],[436.15,673],[440.3,673.85],[445.85,674.15],[451.15,674.85],[457,675],[463.15,675],[470,675],[476.7,675],[482.3,675],[489,674.85],[495.85,674],[501.85,673],[507,672],[511.85,671],[516.15,669.7],[520.85,667.15],[525.15,665],[529.7,662.85],[533.3,660],[537.7,657.15],[541.15,654.7],[545,651],[548.7,647.15],[551.15,643.7],[553.85,639.3],[555.85,636],[557.15,632.85],[559,629],[560.85,624.85],[562,620.15],[562.85,616.15],[563.15,612.85],[563.85,609.15],[564,605.7],[564,601.3],[564,597.85],[564,594],[564,589.7],[564,584.45],[563.85,580.55],[563.15,575.3],[562.85,571],[562,567.15],[560.85,563.7],[559,559.15],[557.3,555.15],[556.7,552],[555.15,549],[554,546],[552.85,543],[551,540],[549.15,537],[547.85,534.15],[546.15,532],[544.85,530],[543,528.15],[541.15,526.85],[539.85,525.15],[538.15,523.85],[536.85,522.15],[535,521],[533,520],[531,519],[528.85,518],[526.15,517],[523.7,515.85],[519.85,514.15],[515.15,512.7],[510.85,510.15],[505.85,507.85],[500.45,505.3],[496.85,503.85],[492.85,502.15],[488.15,500.85],[484,499.15],[480.15,498],[477,497],[473.85,496],[470.3,495],[467.55,493.85],[463.6,492.3],[461.85,492],[460.15,491.85],[459,491.15],[458.15,490.85],[458,490]]

e0 = [[455,387],[454,388],[451,388],[448,389],[444,390],[441,391],[438,392],[433,393],[429,395],[423,396],[417,399],[413,402],[407,406],[403,410],[398,416],[393,424],[390,427],[387,433],[385,437],[383,442],[383,446],[383,450],[383,457],[385,464],[387,471],[390,477],[392,484],[394,489],[397,493],[400,497],[402,501],[405,505],[408,507],[412,511],[416,514],[420,516],[425,518],[432,520],[439,521],[447,522],[455,522],[464,522],[473,522],[483,522],[494,521],[503,519],[513,517],[524,513],[532,508],[542,503],[551,496],[558,491],[565,486],[572,481],[576,477],[580,472],[584,468],[586,465],[588,463],[589,461],[589,458],[590,456],[590,453],[591,451],[591,448],[591,445],[590,443],[589,440],[587,438],[584,435],[582,432],[577,430],[572,426],[566,422],[559,419],[552,415],[546,412],[538,409],[529,404],[521,400],[511,397],[501,395],[492,393],[483,390],[475,388],[467,387],[461,386],[455,385],[450,385],[445,384],[440,384],[437,383],[436,383],[435,383]]

#归一化e8
max_x = None
min_x = None
max_y = None
min_y = None

for point in e0:
    x, y = point
    if max_x is None or x > max_x:
        max_x = x
    if min_x is None or x < min_x:
        min_x = x
    if max_y is None or y > max_y:
        max_y = y
    if min_y is None or y < min_y:
        min_y = y



for i in range(len(e0)):
    x = e0[i][0]
    y = e0[i][1]

    e0[i][0] = (x - min_x) * 200 / (max_x - min_x)
    e0[i][1] = (y - min_y) * 200 / (max_y - min_y)


x_coords = np.linspace(0, 75, 20)
y_coords = np.linspace(200, 0, 20)

pall = np.column_stack((x_coords, y_coords)).tolist()


x_coords = np.linspace(75, 200, 20)
y_coords = np.linspace(0, 0, 20)

pall = pall + np.column_stack((x_coords, y_coords)).tolist()

x_coords = np.linspace(200, 150, 20)
y_coords = np.linspace(0, 200, 20)

pall = pall + np.column_stack((x_coords, y_coords)).tolist()

x_coords = np.linspace(150, 0, 20)
y_coords = np.linspace(200, 200, 20)

pall = pall + np.column_stack((x_coords, y_coords)).tolist()



points = np.array(e1, np.float32)


x = [point[0] for point in points]
y = [point[1] for point in points]

plt.plot(x, y, '-')

# plt.scatter(x, y)
plt.savefig('scatter_plot2.png')

img = cv2.imread('scatter_plot2.png')

gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
cv2.imshow("result", gray)
cv2.waitKey(0)
kx1 = cv2.matchShapes(circle, gray, 1, 0)
kx2 = cv2.matchShapes(circle, gray, 2, 0)
kx3 = cv2.matchShapes(circle, gray, 3, 0)

print("=======circle")
print(kx1)
print(kx2)
print(kx3)
cv2.imshow("result", circle)
cv2.waitKey(0)
print("=======triangle")

ka1 = cv2.matchShapes(tria, gray, 1, 0)
ka2 = cv2.matchShapes(tria, gray, 2, 0)
ka3 = cv2.matchShapes(tria, gray, 3, 0)

print(ka1)
print(ka2)
print(ka3)
cv2.imshow("result", tria)
cv2.waitKey(0)
print("=======sq")

kb1 = cv2.matchShapes(sq, gray, 1, 0)
kb2 = cv2.matchShapes(sq, gray, 2, 0)
kb3 = cv2.matchShapes(sq, gray, 3, 0)

print(kb1)
print(kb2)
print(kb3)

cv2.imshow("result", sq)
cv2.waitKey(0)
print("=======parall")
kc1 = cv2.matchShapes(parall, gray, 1, 0)
kc2 = cv2.matchShapes(parall, gray, 2, 0)
kc3 = cv2.matchShapes(parall, gray, 3, 0)


print(kc1)
print(kc2)
print(kc3)
cv2.imshow("result", parall)
cv2.waitKey(0)
print("=======")